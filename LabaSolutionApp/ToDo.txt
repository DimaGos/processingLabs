прямой путь из таблицы в график

Теперь нужно изменить часть кода так, чтобы при нажатии на кнопку Построить график нас не перекидывало к новое окно с коэффициентами, а оно бы открывалось только когда мы нажмем на
спеиальную кнопку: Копировать коэффциенты (тогда открывается новое окно, которое уже реализовано)

Теперь нужно сделать так чтобы при работе с таблицей можно было данные нажать на дополнительную кнопку сохранить данные для работы с графиком, и тогда при открытии окна потсроения графика мы могли выбирать текущие столбцы,
которые мы добавили в таблицу. (то есть не для комфортной работы с граыфиком не нужно будет сохранять файл с таблицей) А также нужно добавить сохранять таблицу не только в формате xcl, csv, но и в формате txt.

Вот файлы моего готового проекта, нужно проверить корректность написания кода, то есть я писал код с помощью тебя, нужно чтобы он выглядел правильно и соответствовал
требованиям задания. Вот требования:
Формат работы
Работа над каждым проектом ведется в отдельном приватном репозитории на GitHub. В репозитории должны быть добавлены ваш проверяющий (см. ниже).


Примечание: если вы не регистрировались на GitHub и не указывали юзернейм при регистрации на курс, то зарегистрируйтесь на GitHub им сообщите его @nchestnov.


Решение этапа выполняется следующим образом:

заливаете решение в отдельную указанную в задании ветку
создаете Pull Request из этой ветки в ветку main
запрашиваете Review у вашего проверяющего
в течение 7 дней после отправки запроса проверяющий дает вам ответ - либо все ок, либо указывает проблемы для исправления.
если есть проблемы для исправления, то в течение 7 дней вы должны исправить указанные проблемы и снова запросить Review у проверяющего, который даст ответ в течение 7 дней.
Так продолжается до тех пор, пока в вашем решении имеются проблемы.
План работы

Работа над обоими проектами выполняется по следующей схеме:

0. Выбор темы

Так как внутри группы нельзя повторять темы, стоит договориться с вашим проверяющим, что вы планируете сделать.


Планирование
В рамках этого этапа вы создаете план-документацию вашего проекта в виде файла README.md, где подробно описываете что и как хотите сделать в рамках проекта:
- описание проекта - что именно хотите сделать?
- реализуемый функционал - что ваш код будет уметь делать?
- архитектура - на какие классы (с методами и атрибутами) и функции  будете разбивать ваше решение?

Решение этого этапа заливаете в ветку documentation.

Дедлайн первой итерации этого этапа: 20 октября, 23:59
Реализация
В рамках этого этапа вы решаете поставленную при планировании задачу. Если понимаете, что архитектуру лучше изменить - не забудьте описать это в README.md с указанием как пришли к этому выводу.

Кроме того, добавьте в репозиторий список зависимостей (requirements.txt), если они имеются, и инструкции по запуску вашего решения.

Решение этого этапа заливаете в ветку development.

Срок выполнения этого этапа - 14 дней с дня одобрения проверяющим плана вашего решения для каждого проекта.

Требования  к коду проекта
Соблюдайте кодстайл (см. PEP 8)
Пишите описание проекта в виде файла Readme.md с описанием проекта, возможностей, использования приложения, установки зависимостей и инструкции по запуску приложения.
Давайте осмысленные названия коммитов и Pull request’ов
Не добавляйте в репозиторий лишние файлы, например __pycache__, venv или .idea - воспользуйтесь .gitignore
Разделите ваши файлы по директориям - код в src, тесты в tests, вспомогательные медиа-файлы - в assets
Пишите проект в ООП-стиле, а не просто как набор несвязанных функций
Оставляйте комментарии к сложным моментам в коде
Полная документация - все функции, классы и методы должны быть с docstring, описывающем что они делают, что принимают на вход и что возвращают

Как делать НЕ нужно:
проект в одном файле - нужно разбивать функционал на классы, модули, пакеты
непонятные константы - если вводите константу, то комментируйте за что она отвечает И давайте ей понятное наименование
однобуквенные переменные / имена функций и классов - назначение переменной должно быть максимально понятно по ее имени
лишние файлы в проекте - для этого есть .gitignore
отсутствие requirements.txt - используете библиотеки? укажите их в requirements.txt!

То есть нужно проверить правильность написания кода, чтобы он соответствовал требованиям задания. и чтобы лишние библиотеки/куски/комментарии были зачищены.
Также нужно выполнить данные требование: и почему-то (вроде) вообще никто не написал клонирование репозитория в инструкцию
а это нужно делать по-хорошему
пример:
git clone --branch development git@github.com:google/chrome.git

